/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

// Package
package combat_plc_tester.view;

// Imports
import combat_plc_tester.controller.Command;
import combat_plc_tester.controller.DeleteTransitionCommand;
import combat_plc_tester.controller.TestController;
import combat_plc_tester.model.IO.Input;
import combat_plc_tester.model.moore.Transition;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 * Class: SequentialTransitionView
 * 
 * Purpose: 
 * This class represents the View component in the Model-View-Controller (MVC) pattern
 * for managing and displaying sequential transitions in a graphical user interface. It provides
 * a structured way for users to create, update, and visualize sequential transitions between states 
 * in the application.
 * 
 * @author Seniow Andy
 * @version 1.0
 * @since 13/01/2025
 */
public class SequentialTransitionView extends javax.swing.JPanel {

    private TestController testcontroller;          // The test controller.
    
    /**
    * Initializes the `SequentialTransitionView` by setting up its graphical components. 
    */
    public SequentialTransitionView() {
        initComponents();
    }

    public void setTestController(TestController testcontroller){
        this.testcontroller = testcontroller;
    }
    
    /**
    * Populates the transition input combo box with a list of input objects.
    * 
    * @param inputList the list of `Input` objects to populate the combo box. Each input contains an ID and a name.
    */
    public void viewInputs(List<Input> inputList) {
        cmbTransitionInput.removeAllItems();
        for (Input input : inputList) {
            cmbTransitionInput.addItem(input.getInputID() + " " + input.getName());
        }
    }

    /**
    * Populates empty combo box..
    * 
    */
    public void resetviewInputs(){    
         cmbTransitionInput.removeAllItems();
    } 
     
    
    /**
    * Updates the transition inputs table with a list of transition input objects.
    * 
    * Workflow:
    * - Retrieves the table's default model (`DefaultTableModel`) for manipulation.
    * - Clears all existing rows from the table to ensure it is updated with the latest inputs.
    * - Checks if the provided list of transition inputs is not null or empty.
    * - Iterates through the list of transition inputs and adds each input as a new row in the table.
    * 
    * @param transtioninputList the list of `Input` objects to populate the table. Each input contains an ID, name, and value.
    */
    public void viewTransitionInputs(List<Input> transtioninputList) {
        DefaultTableModel defaulttablemodel = (DefaultTableModel) tblTransitionInputs.getModel();
        defaulttablemodel.setRowCount(0);
        if (transtioninputList != null) {
            if (!transtioninputList.isEmpty()) {
                for (Input transitioninput : transtioninputList) {
                    defaulttablemodel.addRow(new Object[]{transitioninput.getInputID(),
                        transitioninput.getName(),
                        transitioninput.getValue().toString(),});
                }
            }
        }
    }
    
    /**
    * Displays the details of a transition in the user interface.
    * 
    * @param transition the `Transition` object containing the data to be displayed. If null, the fields are cleared.
    */
    public void viewTransition(Transition transition) {
        if (transition != null) {
            txtTransitionID.setText(transition.getTransitionID());
            txtTransitionName.setText(transition.getName());
            chbTransitionATC.setSelected(transition.getAfterTimeCondition());
        } else {
            txtTransitionID.setText("");
            txtTransitionName.setText("");
            chbTransitionATC.setSelected(false);
        }
    }

    /**
    * Displays an exception error message to the user in a dialog box.
    * 
    * @param exception The exception message to be displayed in the dialog box. 
    */
    public void exceptionErrorView(String exception) {
        JOptionPane.showMessageDialog(null, exception, "Exception", JOptionPane.ERROR_MESSAGE);
    }
    
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnDeleteSelectedTransition = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblTransitionInputs = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        txtTransitionID = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        txtTransitionName = new javax.swing.JTextField();
        chbTransitionATC = new javax.swing.JCheckBox();
        jLabel4 = new javax.swing.JLabel();
        cmbTransitionInput = new javax.swing.JComboBox<>();
        txtTransitionInputValue = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        btnAddTransitionInput = new javax.swing.JButton();
        btnUpdateTransition = new javax.swing.JButton();
        btnDeleteTransition = new javax.swing.JButton();
        btnUpdateSelectedInput = new javax.swing.JButton();
        jLabel9 = new javax.swing.JLabel();

        setBackground(new java.awt.Color(50, 70, 110));
        setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Sequential Transition Inputs", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 1, 12), new java.awt.Color(255, 255, 255))); // NOI18N
        setForeground(new java.awt.Color(255, 255, 255));
        setPreferredSize(new java.awt.Dimension(340, 515));

        btnDeleteSelectedTransition.setBackground(new java.awt.Color(27, 38, 61));
        btnDeleteSelectedTransition.setForeground(new java.awt.Color(255, 255, 255));
        btnDeleteSelectedTransition.setText("Delete Input");
        btnDeleteSelectedTransition.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteSelectedTransitionActionPerformed(evt);
            }
        });

        tblTransitionInputs.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Name", "Value"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblTransitionInputs);
        if (tblTransitionInputs.getColumnModel().getColumnCount() > 0) {
            tblTransitionInputs.getColumnModel().getColumn(0).setPreferredWidth(20);
        }

        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Transition ID:");

        txtTransitionID.setEnabled(false);

        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Name:");

        chbTransitionATC.setForeground(new java.awt.Color(255, 255, 255));
        chbTransitionATC.setText("After Time Condition");

        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("Inputs:");

        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setText("Value:");

        btnAddTransitionInput.setBackground(new java.awt.Color(27, 38, 61));
        btnAddTransitionInput.setForeground(new java.awt.Color(255, 255, 255));
        btnAddTransitionInput.setText("Add Input");
        btnAddTransitionInput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddTransitionInputActionPerformed(evt);
            }
        });

        btnUpdateTransition.setBackground(new java.awt.Color(27, 38, 61));
        btnUpdateTransition.setForeground(new java.awt.Color(255, 255, 255));
        btnUpdateTransition.setText("Update Transition");
        btnUpdateTransition.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateTransitionActionPerformed(evt);
            }
        });

        btnDeleteTransition.setBackground(new java.awt.Color(27, 38, 61));
        btnDeleteTransition.setForeground(new java.awt.Color(255, 255, 255));
        btnDeleteTransition.setText("Delete Transition");
        btnDeleteTransition.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteTransitionActionPerformed(evt);
            }
        });

        btnUpdateSelectedInput.setBackground(new java.awt.Color(27, 38, 61));
        btnUpdateSelectedInput.setForeground(new java.awt.Color(255, 255, 255));
        btnUpdateSelectedInput.setText("Update Input");
        btnUpdateSelectedInput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateSelectedInputActionPerformed(evt);
            }
        });

        jLabel9.setBackground(new java.awt.Color(51, 235, 224));
        jLabel9.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(255, 255, 255));
        jLabel9.setText("Transition properties");
        jLabel9.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jLabel9.setOpaque(true);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(79, 79, 79)
                                .addComponent(btnUpdateSelectedInput)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(btnDeleteSelectedTransition))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(29, 29, 29)
                                        .addComponent(btnUpdateTransition)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(btnDeleteTransition))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel3)
                                            .addComponent(txtTransitionID, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(txtTransitionName, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(chbTransitionATC, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jLabel2))
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addGroup(layout.createSequentialGroup()
                                                .addGap(18, 18, 18)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(cmbTransitionInput, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addComponent(btnAddTransitionInput, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addComponent(jLabel5)
                                                    .addComponent(txtTransitionInputValue, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(jLabel4)
                                                .addGap(98, 98, 98))))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addComponent(jLabel9)
                                        .addGap(98, 98, 98)))))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addContainerGap())
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {cmbTransitionInput, txtTransitionID, txtTransitionName});

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {btnAddTransitionInput, txtTransitionInputValue});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnDeleteSelectedTransition)
                    .addComponent(btnUpdateSelectedInput))
                .addGap(18, 18, 18)
                .addComponent(jLabel9)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(jLabel4))
                        .addGap(13, 13, 13)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtTransitionID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cmbTransitionInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(jLabel5))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtTransitionName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtTransitionInputValue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(chbTransitionATC, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(btnAddTransitionInput))
                .addGap(42, 42, 42)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnUpdateTransition)
                    .addComponent(btnDeleteTransition))
                .addContainerGap(12, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents
    /**
     * Handles the action event triggered by the "Update Transition" button.
     * 
     * @param evt the `ActionEvent` triggered by clicking the "Update Transition" button.
     */
    private void btnUpdateTransitionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateTransitionActionPerformed
        testcontroller.updateTransition(txtTransitionID.getText(), txtTransitionName.getText(),
                String.valueOf(chbTransitionATC.isSelected()));
    }//GEN-LAST:event_btnUpdateTransitionActionPerformed

    /**
    * Handles the action event triggered by the "Delete Transition" button.
    * 
    * @param evt the `ActionEvent` triggered by clicking the "Delete Transition" button.
    */
    private void btnDeleteTransitionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteTransitionActionPerformed
        Command deletetransitioncommand = new DeleteTransitionCommand(testcontroller, txtTransitionID.getText());
        deletetransitioncommand.execute();
        testcontroller.addCommand(deletetransitioncommand);
    }//GEN-LAST:event_btnDeleteTransitionActionPerformed

    /**
    * Handles the action event triggered by the "Add Transition Input" button.
    * 
    * @param evt the `ActionEvent` triggered by clicking the "Add Transition Input" button.
    */
    private void btnAddTransitionInputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddTransitionInputActionPerformed
        String inputIDname = (String) cmbTransitionInput.getSelectedItem();
        String[] parts = inputIDname.split(" ", 2);
        testcontroller.addInputToTransition(txtTransitionID.getText(), parts[0],
                txtTransitionInputValue.getText());
        txtTransitionInputValue.setText("");
    }//GEN-LAST:event_btnAddTransitionInputActionPerformed

    /**
    * Handles the action event triggered by the "Update Selected Input" button.
    *
    * Workflow:
    * - Retrieves the selected row from the transition inputs table.
    * - If a row is selected, retrieves the input ID and value from the table.
    * - Calls the `updateTransitionInput` method in the controller to update the input.
    * 
    * @param evt the `ActionEvent` triggered by clicking the "Update Selected Input" button.
    */
    private void btnUpdateSelectedInputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateSelectedInputActionPerformed
        DefaultTableModel defaulttablemodel = (DefaultTableModel) tblTransitionInputs.getModel();
        int selectedRow = tblTransitionInputs.getSelectedRow();
        if (selectedRow != -1) {
            String transitioninputID = (String) defaulttablemodel.getValueAt(selectedRow, 0);
            String value = (String) defaulttablemodel.getValueAt(selectedRow, 2);
            testcontroller.updateTransitionInput(txtTransitionID.getText(), transitioninputID, value);
        }
    }//GEN-LAST:event_btnUpdateSelectedInputActionPerformed

    /**
    * Handles the action event triggered by the "Delete Selected Transition Input" button.
    * 
    * Workflow:
    * - Retrieves the selected row from the transition inputs table.
    * - If a row is selected, retrieves the input ID from the table.
    * - Calls the `deleteTransitionInput` method in the controller to remove the input from the transition.
    * 
    * @param evt the `ActionEvent` triggered by clicking the "Delete Selected Transition Input" button.
    */
    private void btnDeleteSelectedTransitionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteSelectedTransitionActionPerformed
        int selectedRow = tblTransitionInputs.getSelectedRow();
        if (selectedRow != -1) {
            String transitioninputID = (String) tblTransitionInputs.getValueAt(selectedRow, 0);
            testcontroller.deleteTransitionInput(txtTransitionID.getText(), transitioninputID);
        }
    }//GEN-LAST:event_btnDeleteSelectedTransitionActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddTransitionInput;
    private javax.swing.JButton btnDeleteSelectedTransition;
    private javax.swing.JButton btnDeleteTransition;
    private javax.swing.JButton btnUpdateSelectedInput;
    private javax.swing.JButton btnUpdateTransition;
    private javax.swing.JCheckBox chbTransitionATC;
    private javax.swing.JComboBox<String> cmbTransitionInput;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tblTransitionInputs;
    private javax.swing.JTextField txtTransitionID;
    private javax.swing.JTextField txtTransitionInputValue;
    private javax.swing.JTextField txtTransitionName;
    // End of variables declaration//GEN-END:variables
}
