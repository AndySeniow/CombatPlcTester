/**
 * This class contains the implementation of graphical user interface (GUI) concepts
 * used in the modeling tool, including rendering of states (as circles), transitions (as lines),
 * snapping to a grid, point manipulation, and interactive visual editing.
 *
 * The design and techniques were developed independently and are based on:
 * - Concepts from the official Oracle Java 2D Graphics documentation [1]
 * - Practical examples and explanations from Liang & Zhang [2] and Haase & Guy [3]
 * - Community-driven discussions from Stack Overflow (tag: java-2d) [4]
 *
 * These sources were consulted for conceptual understanding and inspiration.
 *
 * Features include:
 * - Shape rendering and transformations
 * - Custom painting techniques and layering
 * - Mouse interaction and snapping logic
 * - Grid drawing, selection, and element manipulation
 *
 * References:
 * [1] Oracle. *Trail: 2D Graphics*. Available at: https://docs.oracle.com/javase/tutorial/2d/index.html. Accessed: 2024-05-01.
 * [2] Y. D. Liang and H. Zhang, *Computer Graphics Using Java 2D and 3D*, Pearson Prentice Hall, 2006.
 * [3] C. Haase and R. Guy, *Filthy Rich Clients: Developing Animated and Graphical Effects for Desktop Java Applications*, Addison-Wesley, 2007.
 * [4] Stack Overflow. *Search results for "Java 2D"*. https://stackoverflow.com/questions/tagged/java-2d. Accessed: 2024-05-01.
 */

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

// Package
package combat_plc_tester.view;
import combat_plc_tester.model.moore.GraphElement;
import combat_plc_tester.controller.GraphController;
import java.awt.*;
import java.util.List;
import javax.swing.JLabel;
import javax.swing.JOptionPane;

/**
 * Class: ModelView
 * 
 * Purpose: 
 * This class represents the View component in the Model-View-Controller (MVC) pattern.
 * It extends `javax.swing.JPanel` to provide a graphical interface for visualizing and 
 * interacting with graph elements such as states, transitions, and labels. 
 * 
 * @author Seniow Andy
 * @version 1.0
 * @since 13/01/2025
 */
public class ModelView extends javax.swing.JPanel {

    // Represents the modes available for the view.
    public enum Mode { ADD_STATE, ADD_SEQUENTIAL_TRANSITION, ADD_COMBINATORIAL_TRANSITION, ADD_LABEL, SELECTION }
  
    private GraphController graphcontroller;                    // Controller for managing graph-related functionality.
    private Mode currentMode = Mode.ADD_STATE;                  // The currently active mode of the view.
    private List<GraphElement> stategraphelements;              // List of graph elements representing states.
    private List<GraphElement> transitiongraphelements;         // List of graph elements representing transitions.
    private List<GraphElement> labelgraphelements;              // List of graph elements representing labels.
    private static final double GRID_SIZE = 20;                 // The size of the grid cells used for alignment.
    private static final int POINT_SIZE = 2;                    // The size of points used in the grid.
    
    /**
    * Initializes the `ModelView` by setting up its graphical components. 
    */
    public ModelView() {
        initComponents();    
    }

    public void setGraphController(GraphController graphcontroller){
        this.graphcontroller = graphcontroller;
    }
    
    public void setMode(Mode currentMode){
        this.currentMode = currentMode;
    }
    
    public void setStateGraphElementList(List<GraphElement> stategraphelements){
        this.stategraphelements = stategraphelements;
    }
    
    public void setTransitionGraphElementList(List<GraphElement> transitiongraphelements){
        this.transitiongraphelements = transitiongraphelements;
    }
    
     public void setLabelGraphElementList(List<GraphElement> labelgraphelements){
        this.labelgraphelements = labelgraphelements;
    }
    
    /**
    * Displays an exception error message to the user in a dialog box.
    * 
    * @param exception The exception message to be displayed in the dialog box. 
    */ 
    public void exceptionErrorView(String exception){ 
         JOptionPane.showMessageDialog(null, exception, "Exception", JOptionPane.ERROR_MESSAGE);
    }
    
  
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setBackground(new java.awt.Color(255, 255, 255));
        setBorder(new javax.swing.border.LineBorder(new java.awt.Color(102, 126, 158), 5, true));
        addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                formMouseDragged(evt);
            }
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                formMouseMoved(evt);
            }
        });
        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                formMouseClicked(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                formMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                formMouseReleased(evt);
            }
        });
        addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                formKeyPressed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 772, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 627, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    /**
    * Handles the mouse click event on the form.
    *
    * Workflow:
    * - Delegates the mouse click event to the `GraphController` with the current mode.
    * - Refreshes the view by calling the `repaint` method.
    *
    * @param evt the `MouseEvent` triggered by clicking on the form.
    */
    private void formMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseClicked
        graphcontroller.mouseClicked(currentMode, evt);
        repaint();
    }//GEN-LAST:event_formMouseClicked

    /**
    * Handles the mouse press event on the form.
    *
    * Workflow:
    * - Requests focus for the form to capture further key events.
    * - Delegates the mouse press event to the `GraphController` with the current mode.
    * - Refreshes the view by calling the `repaint` method.
    *
    * @param evt the `MouseEvent` triggered by pressing the mouse on the form.
    */
    private void formMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMousePressed
        this.requestFocusInWindow();
        graphcontroller.mousePressed(currentMode, evt);
        repaint();
    }//GEN-LAST:event_formMousePressed

    /**
    * Handles the mouse release event on the form.
    *
    * Workflow:
    * - Delegates the mouse release event to the `GraphController` with the current mode.
    * - Refreshes the view by calling the `repaint` method.
    *
    * @param evt the `MouseEvent` triggered by releasing the mouse on the form.
    */
    private void formMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseReleased
        graphcontroller.mouseReleased(currentMode, evt);
        repaint();
    }//GEN-LAST:event_formMouseReleased

    /**
    * Handles the mouse drag event on the form.
    *
    * Workflow:
    * - Delegates the mouse drag event to the `GraphController` with the current mode.
    * - Refreshes the view by calling the `repaint` method.
    *
    * @param evt the `MouseEvent` triggered by dragging the mouse on the form.
    */
    private void formMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseDragged
        graphcontroller.mouseDragged(currentMode, evt);
        repaint();
    }//GEN-LAST:event_formMouseDragged

    /**
    * Handles the mouse move event on the form.
    *
    * Workflow:
    * - Delegates the mouse move event to the `GraphController` with the current mode.
    * - Refreshes the view by calling the `repaint` method.
    *
    * @param evt the `MouseEvent` triggered by moving the mouse on the form.
    */
    private void formMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseMoved
        graphcontroller.mouseMoved(currentMode, evt);
        repaint();
    }//GEN-LAST:event_formMouseMoved

    /**
    * Handles the key press event on the form.
    *
    * Workflow:
    * - Delegates the key press event to the `GraphController` with the current mode.
    * - Refreshes the view by calling the `repaint` method.
    *
    * @param evt the `KeyEvent` triggered by pressing a key while the form is in focus.
    */
    private void formKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_formKeyPressed
        graphcontroller.keyPressed(currentMode, evt);
        repaint();
    }//GEN-LAST:event_formKeyPressed

    /**
    * Custom rendering method to paint the components of the form.
    *
    * Workflow:
    * - Removes all previously added labels to prepare for a fresh render.
    * - Calls the superclass's `paintComponent` method to perform the default painting.
    * - Draws the grid on the component for alignment purposes.
    * - Iterates over the transition graph elements and invokes their drawing logic.
    * - Iterates over the state graph elements and invokes their drawing logic.
    * - Adds labels from the label graph elements, if any, to the component for rendering.
    *
    * @param g the `Graphics` object used to perform the rendering.
    */
    @Override
    protected void paintComponent(Graphics g) {
        removeAllLabels();
        super.paintComponent(g);
        drawGrid(g);
        Graphics2D g2 = (Graphics2D) g;
        g2.setStroke(new BasicStroke(2));
        graphcontroller.paintComponent(currentMode, g2);
        for (GraphElement graphtransition : transitiongraphelements) {
            graphtransition.getGraph().draw(g);
        }
        for (GraphElement graphstate : stategraphelements) {
            graphstate.getGraph().draw(g);
        }
        if (!labelgraphelements.isEmpty()) {
            for (GraphElement graphlabel : labelgraphelements) {
                JLabel label = (JLabel) graphlabel.getGraph().getText();
                this.add(label);
            }
        }
    }
 
    /**
    * Removes all `JLabel` components from the form.
    */
    private void removeAllLabels() {
        for (Component comp : getComponents()) {
            if (comp instanceof JLabel) {
                remove(comp);
            }
        }
        revalidate();
    }
    
    /**
    * Draws a grid of points on the form for alignment purposes.
    *
    * Workflow:
    * - Sets the color of the grid points to `DARK_GRAY`.
    * - Iterates over the width of the form in steps defined by `GRID_SIZE`.
    * - For each step along the width, iterates over the height of the form in steps defined by `GRID_SIZE`.
    * - Draws a point (represented as a small filled oval) at each grid intersection.
    * - The position of each point is adjusted so that it is centered relative to its grid coordinates.
    *
    * @param g the `Graphics` object used to draw the grid.
    */
    private void drawGrid(Graphics g) {
        g.setColor(Color.DARK_GRAY);
        for (int x = 0; x <= getWidth(); x += GRID_SIZE) {
            for (int y = 0; y <= getHeight(); y += GRID_SIZE) {
                g.fillOval(x - POINT_SIZE / 2, y - POINT_SIZE / 2, POINT_SIZE, POINT_SIZE);
            }
        }
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
