/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package combat_plc_tester.view;


import combat_plc_tester.controller.TestController;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

/**
 * Class: TestView
 * 
 * Purpose: 
 * This class represents the View component in the Model-View-Controller (MVC) pattern
 * for managing and displaying test-related functionalities in the application. It provides
 * a graphical interface for users to configure, execute, and visualize test cases. 
 * 
 * @author Seniow Andy
 * @version 1.0
 * @since 13/01/2025
 */
public class TestView extends javax.swing.JPanel {

    private TestController testcontroller;           // The test controller.
    
    /**
    * Initializes the `TestView` by setting up its graphical components. 
    */
    public TestView() {
        initComponents();
    }

    public void setTestController(TestController testcontroller){
        this.testcontroller = testcontroller;
    }
    
    public void viewTestPaths(String testpaths){
        txtTestResults.append(testpaths + "\n");  
    }
    
    public void viewTestResults(String testresult){
        txtTestResults.append(testresult + "\n"); 
    }
    
    /**
    * Displays an exception error message to the user in a dialog box.
    * 
    * @param exception The exception message to be displayed in the dialog box. 
    */
    public void exceptionErrorView(String exception){ 
         JOptionPane.showMessageDialog(null, exception, "Exception", JOptionPane.ERROR_MESSAGE);
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel2 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtTestResults = new javax.swing.JTextArea();
        btnStartTest = new javax.swing.JButton();
        btnClearText = new javax.swing.JButton();
        btnSaveTestResults = new javax.swing.JButton();
        btnEndTest = new javax.swing.JButton();

        setBackground(new java.awt.Color(50, 70, 110));
        setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Test", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 1, 12), new java.awt.Color(255, 255, 255))); // NOI18N

        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Results");

        txtTestResults.setBackground(new java.awt.Color(0, 0, 0));
        txtTestResults.setColumns(20);
        txtTestResults.setForeground(new java.awt.Color(255, 255, 204));
        txtTestResults.setRows(5);
        jScrollPane2.setViewportView(txtTestResults);

        btnStartTest.setBackground(new java.awt.Color(27, 38, 61));
        btnStartTest.setForeground(new java.awt.Color(255, 255, 255));
        btnStartTest.setText("Start Test");
        btnStartTest.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnStartTestActionPerformed(evt);
            }
        });

        btnClearText.setBackground(new java.awt.Color(27, 38, 61));
        btnClearText.setForeground(new java.awt.Color(255, 255, 255));
        btnClearText.setText("Clear Text");
        btnClearText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearTextActionPerformed(evt);
            }
        });

        btnSaveTestResults.setBackground(new java.awt.Color(27, 38, 61));
        btnSaveTestResults.setForeground(new java.awt.Color(255, 255, 255));
        btnSaveTestResults.setText("Save Test Results");
        btnSaveTestResults.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveTestResultsActionPerformed(evt);
            }
        });

        btnEndTest.setBackground(new java.awt.Color(27, 38, 61));
        btnEndTest.setForeground(new java.awt.Color(255, 255, 255));
        btnEndTest.setText("End Test");
        btnEndTest.setPreferredSize(new java.awt.Dimension(118, 23));
        btnEndTest.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEndTestActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(80, 80, 80)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 614, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(115, 115, 115)
                        .addComponent(btnStartTest)
                        .addGap(18, 18, 18)
                        .addComponent(btnClearText)
                        .addGap(18, 18, 18)
                        .addComponent(btnSaveTestResults)
                        .addGap(18, 18, 18)
                        .addComponent(btnEndTest, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(92, Short.MAX_VALUE))
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {btnClearText, btnSaveTestResults, btnStartTest});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addComponent(jLabel2)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 454, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(28, 28, 28)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnStartTest)
                    .addComponent(btnClearText)
                    .addComponent(btnSaveTestResults)
                    .addComponent(btnEndTest, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(35, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    /**
    * Handles the action event triggered by the "Start Test" button.
    
    * @param evt the `ActionEvent` triggered by clicking the "Delete Selected Output" button.
    */
    private void btnStartTestActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnStartTestActionPerformed
        testcontroller.execute();
    }//GEN-LAST:event_btnStartTestActionPerformed

    /**
    * Handles the action event triggered by the "Clear Text" button.  
    * @param evt the `ActionEvent` triggered by clicking the "Delete Selected Output" button.
    */
    private void btnClearTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearTextActionPerformed
        txtTestResults.setText("");
    }//GEN-LAST:event_btnClearTextActionPerformed

    /**
    * Handles the action event triggered by the "Save Test Results" button.
    * 
    * Workflow:
    * - Opens a `JFileChooser` dialog to let the user select or specify a file for saving.
    * - If a file is selected:
    *   - Ensures the file has a `.txt` extension. If not, appends the extension.
    *   - Checks if the file already exists:
    *     - If it exists, prompts the user for confirmation to overwrite.
    *     - If the user declines, aborts the save operation.
    *   - Writes the content of the test results text area (`txtTestResults`) to the selected file.
    *   - Displays a success message upon successful save or an error message if an exception occurs.
    * 
    * @param evt the `ActionEvent` triggered by clicking the "Save Test Results" button.
    */
    private void btnSaveTestResultsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveTestResultsActionPerformed
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setDialogTitle("Save File");
        int userSelection = fileChooser.showSaveDialog(this);
        if (userSelection == JFileChooser.APPROVE_OPTION) {
            File fileToSave = fileChooser.getSelectedFile();
            if (!fileToSave.getName().endsWith(".txt")) {
                fileToSave = new File(fileToSave.getAbsolutePath() + ".txt");
            }
            if (fileToSave.exists()) {
                int confirm = JOptionPane.showConfirmDialog(
                        this,
                        "The file already exists. Do you want to overwrite it?",
                        "File Exists",
                        JOptionPane.YES_NO_OPTION,
                        JOptionPane.WARNING_MESSAGE
                );
                if (confirm != JOptionPane.YES_OPTION) {
                    return;
                }
            }
            try (BufferedWriter writer = new BufferedWriter(new FileWriter(fileToSave))) {
                writer.write(txtTestResults.getText()); // 'myTextArea' is je JTextArea variabelenaam
                JOptionPane.showMessageDialog(this, "File saved successfully!", "Success", JOptionPane.INFORMATION_MESSAGE);
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(this, "Error saving file: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_btnSaveTestResultsActionPerformed

    /**
    * Handles the action event triggered by the "End Test" button.  
    * @param evt the `ActionEvent` triggered by clicking the "Delete Selected Output" button.
    */
    private void btnEndTestActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEndTestActionPerformed
        testcontroller.stopRequest();
    }//GEN-LAST:event_btnEndTestActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnClearText;
    private javax.swing.JButton btnEndTest;
    private javax.swing.JButton btnSaveTestResults;
    private javax.swing.JButton btnStartTest;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea txtTestResults;
    // End of variables declaration//GEN-END:variables
}
